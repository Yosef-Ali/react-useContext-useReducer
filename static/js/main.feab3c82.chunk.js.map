{"version":3,"sources":["Reducers/bookReducer.js","contexts/BookContext.js","components/BookDetails.js","components/BookList.js","components/Navbar.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","type","title","book","author","id","uuid","filter","BookContext","createContext","BookContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","books","dispatch","useEffect","setItem","stringify","Provider","value","children","BookDetails","useContext","onClick","className","BookList","length","map","key","Navbar","NewBookForm","useState","setTitle","setAuthor","onSubmit","e","preventDefault","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mMAEaA,EAAc,SAACC,EAAOC,GAClC,OAAQA,EAAOC,MACd,IAAK,WACJ,MAAM,GAAN,mBACIF,GADJ,CAEC,CACCG,MAAOF,EAAOG,KAAKD,MACnBE,OAAQJ,EAAOG,KAAKC,OACpBC,GAAIC,SAGP,IAAK,cACJ,OAAOP,EAAMQ,QAAO,SAACJ,GAAD,OAAUA,EAAKE,KAAOL,EAAOK,MAClD,QACC,OAAON,ICbGS,EAAcC,0BAcZC,EAZa,SAACC,GAAW,IAAD,EACZC,qBAAWd,EAAa,IAAI,WACrD,IAAMe,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAHN,mBAC/BK,EAD+B,KACxBC,EADwB,KAStC,OAJAC,qBAAU,WACTN,aAAaO,QAAQ,QAASL,KAAKM,UAAUJ,MAC3C,CAACA,IAEG,kBAACV,EAAYe,SAAb,CAAsBC,MAAO,CAAEN,QAAOC,aAAaR,EAAMc,WCDlDC,EAVK,SAAC,GAAc,IAAZvB,EAAW,EAAXA,KACdgB,EAAaQ,qBAAWnB,GAAxBW,SACR,OACC,wBAAIS,QAAS,kBAAMT,EAAS,CAAElB,KAAM,cAAeI,GAAIF,EAAKE,OAC3D,yBAAKwB,UAAU,SAAS1B,EAAKD,OAC7B,yBAAK2B,UAAU,UAAU1B,EAAKC,UCWlB0B,EAfE,WAAO,IACfZ,EAAUS,qBAAWnB,GAArBU,MACR,OAAOA,EAAMa,OACZ,yBAAKF,UAAU,aACd,4BACEX,EAAMc,KAAI,SAAC7B,GACX,OAAO,kBAAC,EAAD,CAAaA,KAAMA,EAAM8B,IAAK9B,EAAKE,UAK7C,yBAAKwB,UAAU,SAAf,sCCFaK,EAVA,WAAO,IACbhB,EAAUS,qBAAWnB,GAArBU,MACR,OACC,yBAAKW,UAAU,UACd,iDACA,iDAAuBX,EAAMa,OAA7B,6BCcYI,EAnBK,WAAO,IAClBhB,EAAaQ,qBAAWnB,GAAxBW,SADiB,EAECiB,mBAAS,IAFV,mBAElBlC,EAFkB,KAEXmC,EAFW,OAGGD,mBAAS,IAHZ,mBAGlBhC,EAHkB,KAGVkC,EAHU,KAUzB,OACC,0BAAMC,SAPc,SAACC,GACrBA,EAAEC,iBACFtB,EAAS,CAAElB,KAAM,WAAYE,KAAM,CAAED,QAAOE,YAC5CiC,EAAS,IACTC,EAAU,MAIT,2BAAOrC,KAAK,OAAOyC,YAAY,aAAalB,MAAOtB,EAAOyC,SAAU,SAACH,GAAD,OAAOH,EAASG,EAAEI,OAAOpB,QAAQqB,UAAQ,IAC7G,2BAAO5C,KAAK,OAAOyC,YAAY,SAASlB,MAAOpB,EAAQuC,SAAU,SAACH,GAAD,OAAOF,EAAUE,EAAEI,OAAOpB,QAAQqB,UAAQ,IAC3G,2BAAO5C,KAAK,SAASuB,MAAM,eCGfsB,MAZf,WACC,OACC,yBAAKjB,UAAU,OACd,kBAAC,EAAD,KACC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFgBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.feab3c82.chunk.js","sourcesContent":["import uuid from 'uuid/v1'\n\nexport const bookReducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase 'ADD_BOOK':\n\t\t\treturn [\n\t\t\t\t...state,\n\t\t\t\t{\n\t\t\t\t\ttitle: action.book.title,\n\t\t\t\t\tauthor: action.book.author,\n\t\t\t\t\tid: uuid(),\n\t\t\t\t},\n\t\t\t]\n\t\tcase 'REMOVE_BOOK':\n\t\t\treturn state.filter((book) => book.id !== action.id)\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import React, { createContext, useReducer, useEffect } from 'react'\nimport { bookReducer } from '../Reducers/bookReducer'\n\nexport const BookContext = createContext()\n\nconst BookContextProvider = (props) => {\n\tconst [books, dispatch] = useReducer(bookReducer, [], () => {\n\t\tconst localData = localStorage.getItem('books')\n\t\treturn localData ? JSON.parse(localData) : []\n\t})\n\tuseEffect(() => {\n\t\tlocalStorage.setItem('books', JSON.stringify(books))\n\t}, [books])\n\n\treturn <BookContext.Provider value={{ books, dispatch }}>{props.children}</BookContext.Provider>\n}\n\nexport default BookContextProvider\n","import React, { useContext } from 'react'\nimport { BookContext } from '../contexts/BookContext'\n\nconst BookDetails = ({ book }) => {\n\tconst { dispatch } = useContext(BookContext)\n\treturn (\n\t\t<li onClick={() => dispatch({ type: 'REMOVE_BOOK', id: book.id })}>\n\t\t\t<div className=\"title\">{book.title}</div>\n\t\t\t<div className=\"author\">{book.author}</div>\n\t\t</li>\n\t)\n}\n\nexport default BookDetails\n","import React, { useContext } from 'react'\nimport { BookContext } from '../contexts/BookContext'\nimport BookDetails from './BookDetails'\n\nconst BookList = () => {\n\tconst { books } = useContext(BookContext)\n\treturn books.length ? (\n\t\t<div className=\"book-list\">\n\t\t\t<ul>\n\t\t\t\t{books.map((book) => {\n\t\t\t\t\treturn <BookDetails book={book} key={book.id} />\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t</div>\n\t) : (\n\t\t<div className=\"empty\">No books to read. Hello free time</div>\n\t)\n}\n\nexport default BookList\n","import React, { useContext } from 'react'\nimport { BookContext } from '../contexts/BookContext'\n\nconst Navbar = () => {\n\tconst { books } = useContext(BookContext)\n\treturn (\n\t\t<div className=\"navbar\">\n\t\t\t<h1>Yosef Reding list</h1>\n\t\t\t<p>Currently you have {books.length} book to get through...</p>\n\t\t</div>\n\t)\n}\n\nexport default Navbar\n","import React, { useContext, useState } from 'react'\nimport { BookContext } from '../contexts/BookContext'\n\nconst NewBookForm = () => {\n\tconst { dispatch } = useContext(BookContext)\n\tconst [title, setTitle] = useState('')\n\tconst [author, setAuthor] = useState('')\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault()\n\t\tdispatch({ type: 'ADD_BOOK', book: { title, author } })\n\t\tsetTitle('')\n\t\tsetAuthor('')\n\t}\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<input type=\"text\" placeholder=\"book title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\n\t\t\t<input type=\"text\" placeholder=\"author\" value={author} onChange={(e) => setAuthor(e.target.value)} required />\n\t\t\t<input type=\"submit\" value=\"add book\" />\n\t\t</form>\n\t)\n}\n\nexport default NewBookForm\n","import React from 'react'\n\nimport './index.css'\nimport BookList from './components/BookList'\nimport Navbar from './components/Navbar'\nimport BookContextProvider from './contexts/BookContext'\nimport NewBookForm from './components/BookForm'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<BookContextProvider>\n\t\t\t\t<Navbar />\n\t\t\t\t<BookList />\n\t\t\t\t<NewBookForm />\n\t\t\t</BookContextProvider>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}